diff --git a/README.md b/README.md
index 7b22b30..435ae6c 100644
--- a/README.md
+++ b/README.md
@@ -129,6 +129,7 @@ and customizing the prefixes as shown below.
 listen_addr = ":8125"
 admin_addr = ":8126"
 graphite_addr = "127.0.0.1:2003"
+prometheus_addr = ":9091"
 flush_interval = 60
 
 legacy_namespace = true
diff --git a/cmd/statsdaemon/main.go b/cmd/statsdaemon/main.go
index 9062de6..b302b72 100644
--- a/cmd/statsdaemon/main.go
+++ b/cmd/statsdaemon/main.go
@@ -38,8 +38,9 @@ var (
 	admin_addr    = flag.String("admin_addr", ":8126", "listener address for admin port")
 	profile_addr  = flag.String("profile_addr", "", "listener address for profiler")
 	graphite_addr = flag.String("graphite_addr", "127.0.0.1:2003", "graphite carbon-in url")
+	prometheus_addr = flag.String("prometheus_addr", ":9091", "prometheus listen address")
 	flushInterval = flag.Int("flush_interval", 10, "flush interval in seconds")
-	processes     = flag.Int("processes", 4, "number of processes to use")
+	processes     = flag.Int("processes", 2, "number of processes to use")
 
 	instance = flag.String("instance", "$HOST", "instance name, defaults to short hostname if not set")
 
@@ -221,5 +222,5 @@ func main() {
 			}
 		}()
 	}
-	daemon.Run(*listen_addr, *admin_addr, *graphite_addr)
-}
\ No newline at end of file
+	daemon.Run(*listen_addr, *admin_addr, *graphite_addr, *prometheus_addr)
+}
diff --git a/statsdaemon.go b/statsdaemon.go
index 9537e9c..9901e46 100644
--- a/statsdaemon.go
+++ b/statsdaemon.go
@@ -10,7 +10,7 @@ import (
 	"sync"
 	"syscall"
 	"time"
-
+	"net/http"
 	"github.com/benbjohnson/clock"
 	"github.com/raintank/statsdaemon/common"
 	"github.com/raintank/statsdaemon/out"
@@ -49,10 +49,13 @@ type StatsDaemon struct {
 	Clock         clock.Clock
 	submitFunc    SubmitFunc
 	graphiteQueue chan []byte
+	prometheusQueue chan []byte
+	pms string
 
 	listen_addr   string
 	admin_addr    string
 	graphite_addr string
+	prometheus_addr string
 }
 
 func New(instance string, formatter out.Formatter, flush_rates, flush_counts bool, pct out.Percentiles, flushInterval, max_unprocessed int, max_timers_per_s uint64, signalchan chan os.Signal) *StatsDaemon {
@@ -76,14 +79,17 @@ func New(instance string, formatter out.Formatter, flush_rates, flush_counts boo
 }
 
 // start statsdaemon instance with standard network daemon behaviors
-func (s *StatsDaemon) Run(listen_addr, admin_addr, graphite_addr string) {
+func (s *StatsDaemon) Run(listen_addr, admin_addr, graphite_addr, prometheus_addr string) {
 	s.Clock = clock.New()
 	s.submitFunc = s.GraphiteQueue
 	s.graphiteQueue = make(chan []byte, 1000)
+	s.prometheusQueue = make(chan []byte, 1000)
+	s.pms = ""
 
 	s.listen_addr = listen_addr
 	s.admin_addr = admin_addr
 	s.graphite_addr = graphite_addr
+	s.prometheus_addr = prometheus_addr
 
 	log.Infof("statsdaemon instance '%s' starting", s.instance)
 	output := &out.Output{
@@ -95,7 +101,9 @@ func (s *StatsDaemon) Run(listen_addr, admin_addr, graphite_addr string) {
 	go udp.StatsListener(s.listen_addr, s.fmt.PrefixInternal, output) // set up udp listener that writes messages to output's channels (i.e. s's channels)
 	go s.adminListener()                                              // tcp admin_addr to handle requests
 	go s.metricStatsMonitor()                                         // handles requests fired by telnet api
+	go s.prometheusWriter()
 	go s.graphiteWriter()                                             // writes to graphite in the background
+	go s.prometheusListener()
 	s.metricsMonitor()                                                // takes data from s.Metrics and puts them in the guage/timers/etc objects. pointers guarded by select. also listens for signals.
 }
 
@@ -298,6 +306,48 @@ func (s *StatsDaemon) GraphiteQueue(c *out.Counters, g *out.Gauges, t *out.Timer
 	buf, _ = s.instrument(g, buf, now, "gauge")
 	buf, _ = s.instrument(t, buf, now, "timer")
 	s.graphiteQueue <- buf
+	s.prometheusQueue <- buf
+	s.pms = "# HELP metrics autogenerated by statsdaemon\n"
+}
+
+func (s *StatsDaemon) prometheusWriter() {
+    for buf := range s.prometheusQueue {
+        in_timer := false
+        for _, line := range bytes.Split(buf, []byte("\n")) {
+            if len(line) == 0 {
+                continue
+            }
+            data := strings.Split(string(line), " ")
+            if len(data) < 2 {
+                continue
+            }
+            if data[1] == "" {
+                continue
+            }
+            if strings.HasPrefix(data[0], s.fmt.Prefix_counters) {
+                key := strings.Replace(data[0], ".", "_", -1)
+                s.pms = s.pms + fmt.Sprintf("# HELP %s autogenerated by statsdaemon\n# TYPE %s counter\n%s %s\n", key, key, key, data[1])
+            } else if strings.HasPrefix(data[0], s.fmt.Prefix_gauges) {
+                key := strings.Replace(data[0], ".", "_", -1)
+                s.pms = s.pms + fmt.Sprintf("# HELP %s autogenerated by statsdaemon\n# TYPE %s gauges\n%s %s\n", key, key, key, data[1])
+            } else if strings.HasPrefix(data[0], s.fmt.Prefix_timers) {
+                if in_timer {
+                    timer_base_pos := strings.LastIndex(data[0], ".")
+                    if !strings.Contains(data[0][timer_base_pos:], "_") {
+                        key := strings.Replace(data[0], ".", "_", -1)
+                        s.pms = s.pms + fmt.Sprintf("%s %s\n", key, data[1])
+                    }
+                } else {
+                    in_timer = true
+                    timer_base_pos := strings.LastIndex(data[0], ".")
+                    key := strings.Replace(data[0], ".", "_", -1)
+                    s.pms = s.pms + fmt.Sprintf("# HELP %s autogenerated by statsdaemon\n# TYPE %s summary\n", data[0][0:timer_base_pos], data[0][0:timer_base_pos])
+                    s.pms = s.pms + fmt.Sprintf("%s %s\n", key, data[1])
+                }
+            }
+        }
+        buf = buf[:0]
+    }
 }
 
 // Amounts is a datastructure to track numbers of packets, in particular:
@@ -494,3 +544,14 @@ func (s *StatsDaemon) adminListener() {
 		go s.handleApiRequest(conn, nil)
 	}
 }
+
+func (s *StatsDaemon) prometheusListener() {
+    http.HandleFunc("/metrics", func(w http.ResponseWriter, r *http.Request) {
+        w.Write([]byte(s.pms))
+    })
+    if err := http.ListenAndServe(s.prometheus_addr, nil); err != nil {
+        fmt.Println("Error accepting: ", err.Error())
+        os.Exit(1)
+    }
+}
+
diff --git a/udp/parse.go b/udp/parse.go
index 23a6bc5..34fe746 100644
--- a/udp/parse.go
+++ b/udp/parse.go
@@ -139,6 +139,9 @@ func lexModifierSep(l *lexer) stateFn {
 // lex the sample rate
 func lexSampleRate(l *lexer) stateFn {
 	b := l.next()
+	if b == '#' {
+		return nil
+	}
 	if b != '@' {
 		l.err = errInvalidSampling
 	}

